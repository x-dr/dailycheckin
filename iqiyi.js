/*
1.Áà±Â•áËâ∫ÊØèÊó•‰ªªÂä°ËÑöÊú¨ ËØ∑‰ΩéË∞É‰ΩøÁî® ËØ∑‰∏çË¶ÅÁî®‰∫éÂïÜ‰∏öÁâüÂà© ‰∏ÄÂ§©‰∏ÄÊ¨° ËØ∑Ëá™Ë°åÊñüÈÖåËÆæÁΩÆcrontab
2.cookieËé∑ÂèñÊñπÂºè
    1.cookieÂèØ‰ª•Áî®Âà´‰∫∫loon„ÄÅqxÁ≠âËΩØ‰ª∂ÁöÑmitmÁ±ªËá™Âä®Ëé∑ÂèñÂÜçÂéªboxjsÈáåÂ§çÂà∂Âá∫Êù•Â°´ÂÜôÂà∞ÁéØÂ¢ÉÂèòÈáèÊàñÊú¨ËÑöÊú¨‰∏≠
    2.‰πüÂèØ‰ª•Ëá™Ë°åÊäìÂåÖ ÁîµËÑëÊàñËÄÖÊâãÊú∫ÈÉΩÂèØ‰ª•
    3.ÂÆûÂú®ÈÉΩ‰∏ç‰ºö
3.cookieÈ£üÁî®ÊñπÂºè: ÂèØ‰ª•Âè™‰øùÁïôP00001=xxx;‰∏≠xxxÁöÑÂÄº ‰πüÂèØ‰ª•Êï¥ÊÆµÈÉΩË¶Å ÈùíÈæôËøêË°åÂèØÊñ∞Âª∫Âπ∂ÊîæÂÖ•Âà∞ÁéØÂ¢ÉÂèòÈáè iqy_ck ‰∏≠ ‰πüÂèØ‰ª•Áõ¥Êé•Â°´ÂÜôÂú®Êú¨ËÑöÊú¨‰∏≠
4.ÂÖ≥‰∫édfp
    1.dfpÁõ∏ÂΩì‰∫éÁà±Â•áËâ∫ÁöÑÊµèËßàÂô®ÊåáÁ∫π ‰∏çÈúÄË¶ÅÁôªÂΩï‰πü‰ºöÊúâ ÊúâÊïàÊúüÈùûÂ∏∏Èïø ÂÆûÊµãÂçäÂπ¥Â§öÂâçÁöÑËøòËÉΩÁî® ÂÖ∂‰∏≠È¢ÜÂèñÊØèÊó•‰ªªÂä°ÁöÑÂ•ñÂä±ÂíåÂà∑ËßÇÂΩ±Êó∂ÈïøÈÉΩÈúÄË¶Å‰ΩøÁî®Âà∞
    2.dfpÁõÆÂâçÊú¨ËÑöÊú¨ÂÜôÊ≠ª‰∫Ü‰∏Ä‰∏™ ‰ΩÜÊòØÂ§öÁî®Êà∑‰ΩøÁî®Âêå‰∏Ä‰∏™‰∏çÁü•ÈÅìÊúâÊ≤°ÊúâÈ£éÈô©
    3.Âª∫ËÆÆÊúâËÉΩÂäõÁöÑËá™Â∑±ÊäìÂåÖ Âú®cookieÈáåÁöÑ__dfpÂ≠óÊÆµ ÁÑ∂ÂêéÁéØÂ¢ÉÂèòÈáèÊñ∞Â¢û iqiyi_dfp Â°´ÂÖ• ÊàñËÄÖÂú®Êú¨ËÑöÊú¨ÂÜÖÂÜôÊ≠ª
    4.‰∏ç‰ºöËá™Â∑±ÊäìÁöÑËØù ËØ∑ÊâìÂºÄËÆæÁΩÆÁéØÂ¢ÉÂèòÈáè get_iqiyi_dfp ‰∏∫ True ÂÜçÊâßË°åËÑöÊú¨‰ºöËé∑ÂæóÂπ∂ËæìÂá∫Âà∞Èù¢Êùø ËØ∑Â§çÂà∂ÂêéÊåâ‰∏ä‰∏ÄÊù°Â°´ÂÖ•ÁéØÂ¢ÉÂèòÈáè Ëé∑ÂèñÂÆåËØ∑Âà†Èô§get_iqiyi_dfpÁéØÂ¢ÉÂèòÈáè Â∞èÈ∏°Áªè‰∏çËµ∑Êìç
    5.getËØ∑Ê±Ç Ê≤°Êê∫Â∏¶‰ªª‰Ωï‰∏úË•øÂá∫Âéª ÂºÄÊ∫êËÑöÊú¨ ËØ∑‰∏çË¶ÅËØ¥‰ªÄ‰πàÊèê‰∫§‰ªÄ‰πà‰∏úË•øÂà∞ÊàëÊúçÂä°Âô®
5.Â∫ì‰∏≠ÊúâÊØèÊúàËá™Âä®È¢ÜÂèñÁà±Â•áËâ∫‰ºöÂëòÂ§©Êï∞Á∫¢ÂåÖÁöÑËÑöÊú¨ ÂèØÈÖçÂêà‰ΩøÁî®(ÈúÄÊúâÈ´òÁ≠âÁ∫ßÁöÑËøêË°åËÑöÊú¨Êèê‰æõÁ∫¢ÂåÖ ÂÖ∂ÂÆÉ‰∫∫ÊâçÂèØ‰ª•È¢ÜÂèñ)

cron: 51 8,21 * * *
const $ = new Env("Áà±Â•áËâ∫ÊØèÊó•‰ªªÂä°ËÑöÊú¨");
*/







const crypto = require('crypto');
const axios = require('axios');
const notify = require('./sendNotify')


let pushMsg = [];

let P00001 = '';

let P00003 = '';

let dfp = '';

let end = '';

const requestPromise = async (params) => {
    return axios({
        url: params.url,
        method: params.method || 'POST',
        headers: params.headers || headers,
        data: params.body,
        validateStatus: status => {
            return status >= 200 && status < 400;
        },
        maxRedirects: 0
    })
        .then(res => {
            return res;
        })
        .catch(err => {
            return err;
        })
}

const md5Crypto = (md5str) => {
    const hash = crypto.createHash('md5')
    hash.update(md5str)

    const md5strnew = hash.digest('hex')
    return md5strnew;
}
const time = () => {
    const end = ((Date.now() - start) / 1000).toFixed(2)
    return console.log('\nÁ≠æÂà∞Áî®Êó∂: ' + end + ' Áßí')
}

const delay = async (ms) => {
    return new Promise((resolve) => setTimeout(resolve, ms))
}
const k = (...argv) => {
    const e = argv.length > 0 && void 0 !== argv[0] ? argv[0] : ""
    const t = argv.length > 1 && void 0 !== argv[1] ? argv[1] : {}
    const a = argv.length > 2 && void 0 !== argv[2] ? argv[2] : {}
        , n = a.split
        , c = void 0 === n ? "|" : n
        , r = a.sort
        , s = void 0 === r || r
        , o = a.splitSecretKey
        , i = void 0 !== o && o
        , l = s ? Object.keys(t).sort() : Object.keys(t)
        , u = l.map((function (e) {
            return "".concat(e, "=").concat(t[e])
        }
        )).join(c) + (i ? c : "") + e;
    return md5Crypto(u)
}

const w = (...argv) => {
    var e = argv.length > 0 && void 0 !== argv[0] ? argv[0] : {}
        , t = [];
    return Object.keys(e).forEach((function (a) {
        t.push("".concat(a, "=").concat(e[a]))
    }
    )),
        t.join("&")
}


const stringRandom = (length) => {
    var rdm62, ret = '';
    while (length--) {
        rdm62 = 0 | Math.random() * 62;
        ret += String.fromCharCode(rdm62 + (rdm62 < 10 ? 48 : rdm62 < 36 ? 55 : 61))
    }
    return ret;
};



const Checkin = async () => {
    const timestamp = new Date().getTime();
    const sign_date = {
        agentType: "1",
        agentversion: "1.0",
        appKey: "basic_pcw",
        authCookie: P00001,
        qyid: md5Crypto(stringRandom(16)),
        task_code: "natural_month_sign",
        timestamp: timestamp,
        typeCode: "point",
        userId: P00003,
    };
    const post_date = {
        "natural_month_sign": {
            "agentType": "12",
            "agentversion": "14.9.0",
            "authCookie": P00001,
            "qyid": md5Crypto(stringRandom(16)),
            "taskCode": "iQIYI_mofhr",
            "verticalCode": "iQIYI",
            "dfp":dfp
        }
    };
    const sign = k("UKobMjDMsDoScuWOfp6F", sign_date, {
        split: "|",
        sort: !0,
        splitSecretKey: !0
    });
    // console.log(sign);
    const res = await requestPromise({
        url: `https://community.iqiyi.com/openApi/task/execute?${w(sign_date)}&sign=${sign}`,
        headers: {
            "Content-Type": "application/json",
            "User-Agent": "Mozilla/5.0 (iPhone; CPU iPhone OS 14_4_2 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Mobile/15E148 iqiyiVersion/11.4.5",
        },
        body: post_date,
        method: 'POST',
    })
    let CheckinMsg, rewards = [], CheckinMsgarr = [];
    try {
        // if (error) throw new Error(`Êé•Âè£ËØ∑Ê±ÇÂá∫Èîô ‚ÄºÔ∏è`);
        if (res.data.code === "A00000") {
            if (res.data.data.code === "A0000") {
                for (let i = 0; i < res.data.data.data.rewards.length; i++) {
                    if (res.data.data.data.rewards[i].rewardType == 1) {
                        rewards.push(`ÊàêÈïøÂÄº+${res.data.data.data.rewards[i].rewardCount}`)
                    } else if (res.data.data.data.rewards[i].rewardType == 2) {
                        rewards.push(`VIPÂ§©+${res.data.data.data.rewards[i].rewardCount}`)
                    } else if (res.data.data.data.rewards[i].rewardType == 3) {
                        rewards.push(`ÁßØÂàÜ+${res.data.data.data.rewards[i].rewardCount}`)
                    }
                }
                var continued = res.data.data.data.signDays;

                CheckinMsg = `Â∫îÁî®Á≠æÂà∞: ${rewards.join(", ")}${rewards.length < 3 ? `, Á¥ØËÆ°Á≠æÂà∞${continued}Â§©` : ``} üéâ`;
            } else {
                CheckinMsg = `Â∫îÁî®Á≠æÂà∞: ${res.data.data.msg} ‚ö†Ô∏è`;
            }
        } else {
            CheckinMsg = `Â∫îÁî®Á≠æÂà∞: CookieÊó†Êïà ‚ö†Ô∏è`;
        }

    } catch (e) {
        console.log(e)
        CheckinMsg = `Â∫îÁî®Á≠æÂà∞: ${e.message || e}`;
    }
    pushMsg.push(CheckinMsg);
    console.log(CheckinMsg);
    // return CheckinMsgarr;

}


const get_userinfo = async () => {
    const timestamp = new Date().getTime();
    const res = await requestPromise({
        url: `https://tc.vip.iqiyi.com/growthAgency/v2/growth-aggregation?messageId=${md5Crypto(stringRandom(16))}&platform=97ae2982356f69d8&P00001=${P00001}&responseNodes=duration%2Cgrowth%2Cupgrade%2CviewTime%2CgrowthAnnualCard&_=${timestamp}`,
        headers: {
            "Content-Type": "application/json",
            "User-Agent": "Mozilla/5.0 (iPhone; CPU iPhone OS 14_4_2 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Mobile/15E148 iqiyiVersion/11.4.5",
        },
        method: 'GET'
    })
    let msg;
    try {
        if (res.data.code === 'A00000') {
            const growth = res.data.data.growth
            msg = `Áà±Â•áËâ∫-Áî®Êà∑‰ø°ÊÅØ\nÂà∞ÊúüÊó∂Èó¥:${growth.deadline}\nÂΩìÂâçÁ≠âÁ∫ß‰∏∫: ${growth.level}\n‰ªäÊó•Ëé∑ÂæóÊàêÈïøÂÄº: ${growth.todayGrowthValue}\nÊÄªÊàêÈïøÂÄº: ${growth.growthvalue}\nË∑ùÁ¶ª‰∏ã‰∏ÄÁ≠âÁ∫ßËøòÂ∑Æ${growth.distance}ÊàêÈïøÂÄº`
            console.log(msg);
        } else {
            console.log(res.data.msg)
        }

    } catch (e) {
        console.log(e)
    }
    // console.log(msg);
    pushMsg.push(msg);
}




const getUid = async () => {
    const res = await requestPromise({
        url: `https://passport.iqiyi.com/apis/user/info.action?authcookie=${P00001}&fields=userinfo%2Cqiyi_vip&timeout=15000`,
        headers: {
            "Content-Type": "application/json",
            "User-Agent": "Mozilla/5.0 (iPhone; CPU iPhone OS 14_4_2 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Mobile/15E148 iqiyiVersion/11.4.5",
        },
        method: 'GET',
    })
    try {
        if (res.data.code === 'A00000') {
            // console.log(res.data);
            // console.log(res.data.data.userinfo.pru)
            return res.data.data.userinfo.pru
        } else {
            console.log("Áà±Â•áËâ∫ÊØèÊó•‰ªªÂä°: ËØ∑Ê±ÇapiÂ§±Ë¥• ÊúÄÂ§ßÂèØËÉΩÊòØcookieÂ§±Êïà‰∫Ü ‰πüÂèØËÉΩÊòØÁΩëÁªúÈóÆÈ¢ò")
        }
    } catch (e) {
        console.log(e)
    }

}

const lottery_draw = async (s) => {
    const timestamp = new Date().getTime();
    const uid = await getUid()
    // console.log("1",uid);
    const res = await requestPromise({
        url: `https://iface2.iqiyi.com/aggregate/3.0/lottery_activity?app_k=0&app_v=0&platform_id=10&dev_os=2.0.0&dev_ua=0&net_sts=0&qyid=${md5Crypto(stringRandom(16))}&psp_uid=${uid}&psp_cki=${P00001}&psp_status=3&secure_p=0&secure_v=1&req_sn=${timestamp}`,
        headers: {
            "Content-Type": "application/json",
            "User-Agent": "Mozilla/5.0 (iPhone; CPU iPhone OS 14_4_2 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Mobile/15E148 iqiyiVersion/11.4.5",
        },
        method: 'GET',
    })
    let LotteryMsg
    try {
        const Lotterylast = res.data.kv.code === 'Q00702' ? true : false
        if (res.data.code === 0 && res.data.awardName) {
            // console.log(res.data);
            LotteryMsg = `Â∫îÁî®ÊäΩÂ•ñ: ${!Lotterylast ? `${res.data.awardName.replace(/„Ää.+„Äã/, "Êú™‰∏≠Â•ñ")} üéâ` : `ÊÇ®ÁöÑÊäΩÂ•ñÊ¨°Êï∞Â∑≤ÁªèÁî®ÂÆå ‚ö†Ô∏è`}`
            console.log(LotteryMsg)
        } else if (res.data.hasOwnProperty("errorReason")) {
            LotteryMsg = `Â∫îÁî®ÊäΩÂ•ñ: ${res.data.errorReason || `Êú™Áü•ÈîôËØØ`} ‚ö†Ô∏è`
            console.log(LotteryMsg)

        } else {
            LotteryMsg = `Â∫îÁî®ÊäΩÂ•ñ: ${res.data}`
            console.log(LotteryMsg);
        }
        pushMsg.push(LotteryMsg)
        return Lotterylast
    } catch (e) {
        console.log(e)
    }
    // console.log(res.data);
    console.log(LotteryMsg);


}




const getTaskList = async () => {
    let taskListMsg, taskList = [];
    const res = await requestPromise({
        url: `https://tc.vip.iqiyi.com/taskCenter/task/queryUserTask?P00001=${P00001}`,
        headers: {
            "Content-Type": "application/json",
            "User-Agent": "Mozilla/5.0 (iPhone; CPU iPhone OS 14_4_2 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Mobile/15E148 iqiyiVersion/11.4.5",
        },
        method: 'GET',
    })
    try {
        if (res.data.code === 'A00000' && res.data.data && res.data.data.tasks) {
            Object.keys(res.data.data.tasks).map((group) => {
                (res.data.data.tasks[group] || []).map((item) => {
                    // console.log(item);
                    taskList.push({
                        name: item.taskTitle,
                        taskCode: item.taskCode,
                        status: item.status
                    })
                })
            })
            taskListMsg = `Ëé∑ÂèñÊàêÂäü!`;
        } else {
            taskListMsg = `Ëé∑ÂèñÂ§±Ë¥•!`;

        }
    } catch (e) {
        taskListMsg = `${e.message || e} ‚ÄºÔ∏è`;
    }
    // console.log(`Áà±Â•áËâ∫-‰ªªÂä°ÂàóË°®: ${taskListMsg}\n`)
    // console.log(taskList);
    return taskList

}


const joinTask = async (task) => {
    let joinTaskMsg;
    const res = await requestPromise({
        url: `https://tc.vip.iqiyi.com/taskCenter/task/joinTask?P00001=${P00001}&taskCode=${task.taskCode}&platform=b6c13e26323c537d&lang=zh_CN&app_lm=cn`,
        // url: `https://tc.vip.iqiyi.com/taskCenter/task/joinTask?P00001=${P00001}&taskCode=${taskCode}`,
        headers: {
            "Content-Type": "application/json",
            "User-Agent": "Mozilla/5.0 (iPhone; CPU iPhone OS 14_4_2 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Mobile/15E148 iqiyiVersion/11.4.5",
        },
        method: 'GET',
    })
    try {
        joinTaskMsg = res.data.msg
    } catch (e) {
        joinTaskMsg = `${e.message || e} ‚ÄºÔ∏è`;
    }
    // console.log(`Áà±Â•áËâ∫-Âä†ÂÖ•‰ªªÂä°: ${joinTaskMsg}\n`)
    // return joinTaskMsg

    // console.log(res.data);
    console.log(`Áà±Â•áËâ∫-È¢ÜÂèñ‰ªªÂä°: ${task.name} => ${joinTaskMsg}`)

}

const notifyTask = async (task) => {
    const timestamp = new Date().getTime();
    const res2 = await requestPromise({
        url: `https://tc.vip.iqiyi.com/taskCenter/task/notify?taskCode=${task.taskCode}&P00001=${P00001}&platform=97ae2982356f69d8&lang=cn&bizSource=component_browse_timing_tasks&_=${timestamp}`,
        headers: {
            "Content-Type": "application/json",
            "User-Agent": "Mozilla/5.0 (iPhone; CPU iPhone OS 14_4_2 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Mobile/15E148 iqiyiVersion/11.4.5",
        },
        method: 'GET',
    })
    // console.log(res2.data);
    let notifyTaskMsg;
    try {
        notifyTaskMsg = res2.data.code === 'A00000' ? `ÂÆåÊàê‰ªªÂä°ÊàêÂäü` : `ÂÆåÊàê‰ªªÂä°Â§±Ë¥•`
    } catch (e) {
        notifyTaskMsg = `${e.message || e} ‚ÄºÔ∏è`;
    }

    // console.log(notifyTaskMsg);
    console.log(`Áà±Â•áËâ∫-ÂºÄÂßã‰ªªÂä°: ${task.name} => ${notifyTaskMsg} `)
    // return notifyTaskMsg
}
//0ÔºöÂæÖÈ¢ÜÂèñ 1ÔºöÂ∑≤ÂÆåÊàê 2ÔºöÊú™ÂºÄÂßã 4ÔºöËøõË°å‰∏≠



const getTaskRewards = async (task) => {
    let getTaskRewardsMsg;
    const res3 = await requestPromise({
        url: `https://tc.vip.iqiyi.com/taskCenter/task/getTaskRewards?P00001=${P00001}&taskCode=${task.taskCode}&lang=zh_CN&platform=b2f2d9af351b8603`,
        headers: {
            "Content-Type": "application/json",
            "User-Agent": "Mozilla/5.0 (iPhone; CPU iPhone OS 14_4_2 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Mobile/15E148 iqiyiVersion/11.4.5",
        },
        method: 'GET',
    })
    try {
        // console.log(res3.data);

        getTaskRewardsMsg = res3.data.code === 'A00000' && res3.data.dataNew[0] !== undefined ? `‰ªªÂä°Â•ñÂä±: ${task.name} => ${res3.data.dataNew[0].name + res3.data.dataNew[0].value} üéâ` : `‰ªªÂä°Â•ñÂä±: ${task.name} => ${res3.data.msg !== `ÊàêÂäü` && res3.data.msg || `Êú™ÂÆåÊàê`} ‚ö†Ô∏è`

    } catch (e) {
        console.log(e)
    }

    pushMsg.push(getTaskRewardsMsg)
    return getTaskRewardsMsg
}


const iqiyi = async (cookie) => {
    const start = Date.now()
    if (cookie.includes("P00001") && cookie.includes("P00003") && cookie.includes("__dfp")) {
        P00001 = cookie.match(/P00001=(.*?);/)[1];
        P00003 = cookie.match(/P00003=(.*?);/)[1];
        dfp = cookie.match(/__dfp=(.*?)@/)[1];
        console.log("P00001:" + P00001);
        console.log("P00003:" + P00003);
        console.log("dfp:" + dfp);
        console.log("Ëé∑ÂèñCookie: ÊàêÂäü");
        await Checkin()

        for (let i = 0; i < 3; i++) {
            const run = await lottery_draw(i);
            // console.log(`${run}\n`);
            if (!run) {
                await delay(10000)
            } else {
                break
            }
        }

        const tasks = await getTaskList();
        for (let i = 0; i < tasks.length; i++) {
            // console.log(tasks[i]);
            if (![1, 4].includes(tasks[i].status)) { //0ÔºöÂæÖÈ¢ÜÂèñ 1ÔºöÂ∑≤ÂÆåÊàê 2ÔºöÊú™ÂºÄÂßã 4ÔºöËøõË°å‰∏≠
                await joinTask(tasks[i]);
                await delay(10000)
                await notifyTask(tasks[i]);
                await delay(10000)
                await getTaskRewards(tasks[i]);
                console.log(`--------------------`)
            }
        }
        await get_userinfo()
        end = ((Date.now() - start) / 1000).toFixed(2)


        // pushMsg.push(`\nÁ≠æÂà∞Áî®Êó∂: ${end}Áßí`)

        // await notify.sendNotify('Áà±Â•áËâ∫',`${pushMsg.join(`\n`)} \n\nÁ≠æÂà∞Áî®Êó∂: ${end}Áßí`).then((res) => {
        //     console.log(res);
        // }).catch((e) => {
        //     console.log(e);
        // })


        console.log('\nÁ≠æÂà∞Áî®Êó∂: ' + end + ' Áßí')

    } else {
        console.log("ËØ∑Â°´ÂÜôcookie")
    }


}


// (async () => {
//     const cookie = process.env.IQIYI_COOKIE || '';
//     await iqiyi(cookie);
// })();
// export default iqiyi
// module.exports = iqiyi;


(async () => {
    const cookie = process.env.IQIYI_COOKIE || '';

    // Split the cookie string into an array using "&" as the separator
    const cookieValues = cookie.split('&');

    // Iterate through each cookie value and call iqiyi function
    for (const value of cookieValues) {
        await iqiyi(value);
    }
    await notify.sendNotify('Áà±Â•áËâ∫',`${pushMsg.join(`\n`)} \n\nÁ≠æÂà∞Áî®Êó∂: ${end}Áßí`)
})();
